---
<%
  # parse terraform outputs
  require 'json'

  input_path = File.join(File.dirname(__FILE__), 'tf-outputs.json')
  input_contents = File.open(input_path).read
  @inputs = JSON.parse(input_contents)

  def p(prop_name)
    if @inputs.has_key?(prop_name)
      @inputs[prop_name]
    else
      raise "Cannot find property '#{prop_name}' in input props: #{@inputs.keys.join(', ')}"
    end
  end
%>
<%
  # write private key file
  private_key_path = File.join(File.dirname(__FILE__), 'bosh.pem')
  unless File.file?(private_key_path)
    File.open(private_key_path, 'w') {|f| f.write(ENV.fetch('BOSH_PRIVATE_KEY')) }
  end
%>
name: bosh

releases:
- name: bosh
  url: https://bosh.io/d/github.com/cloudfoundry/bosh?v=256.2
  sha1: ff2f4e16e02f66b31c595196052a809100cfd5a8
- name: bosh-aws-cpi
  url: https://bosh.io/d/github.com/cloudfoundry-incubator/bosh-aws-cpi-release?v=53
  sha1: 3a5988bd2b6e951995fe030c75b07c5b922e2d59

resource_pools:
- name: vms
  network: private
  stemcell:
    url: https://bosh.io/d/stemcells/bosh-aws-xen-hvm-ubuntu-trusty-go_agent?v=3232.4
    sha1: ac920cae17c7159dee3bf1ebac727ce2d01564e9
  cloud_properties:
    instance_type: m3.xlarge
    ephemeral_disk: {size: 25_000, type: gp2}
    availability_zone: <%= p('AvailabilityZone') %>

disk_pools:
- name: disks
  disk_size: 20_000
  cloud_properties: {type: gp2}

networks:
- name: private
  type: manual
  subnets:
  - range: <%= p('PublicCIDR') %>
    gateway: <%= p('PublicGateway') %>
    dns: [<%= p('DNS') %>]
    cloud_properties: {subnet: <%= p('PublicSubnetID') %>}
- name: public
  type: vip

jobs:
- name: bosh
  instances: 1

  templates:
  - {name: nats, release: bosh}
  - {name: postgres, release: bosh}
  - {name: blobstore, release: bosh}
  - {name: director, release: bosh}
  - {name: health_monitor, release: bosh}
  - {name: registry, release: bosh}
  - {name: aws_cpi, release: bosh-aws-cpi}

  resource_pool: vms
  persistent_disk_pool: disks

  networks:
  - name: private
    static_ips:
    - <%= p('DirectorStaticIP') %>
    default: [dns, gateway]
  - name: public
    static_ips:
    - <%= p('DirectorEIP') %>

  properties:
    nats:
      address: 127.0.0.1
      user: nats
      password: nats-password

    postgres: &db
      listen_address: 127.0.0.1
      host: 127.0.0.1
      user: postgres
      password: postgres-password
      database: bosh
      adapter: postgres

    registry:
      address: <%= p('DirectorStaticIP') %>
      host: <%= p('DirectorStaticIP') %>
      db: *db
      http: {user: admin, password: admin, port: 25777}
      username: admin
      password: admin
      port: 25777

    blobstore:
      address: <%= p('DirectorStaticIP') %>
      port: 25250
      provider: dav
      director: {user: director, password: director-password}
      agent: {user: agent, password: agent-password}

    director:
      address: 127.0.0.1
      name: my-bosh
      db: *db
      cpi_job: aws_cpi
      max_threads: 10
      user_management:
        provider: local
        local:
          users:
          - name: <%= ENV.fetch('BOSH_DIRECTOR_USERNAME') %>
            password: <%= ENV.fetch('BOSH_DIRECTOR_PASSWORD') %>
          - name: hm
            password: <%= ENV.fetch('BOSH_DIRECTOR_PASSWORD') %>

    hm:
      director_account:
        user: hm
        password: <%= ENV.fetch('BOSH_DIRECTOR_PASSWORD') %>
      resurrector_enabled: true

    aws: &aws
      access_key_id: <%= ENV.fetch('AWS_ACCESS_KEY_ID') %>
      secret_access_key: <%= ENV.fetch('AWS_SECRET_ACCESS_KEY') %>
      default_key_name: <%= p('KeyName') %>
      default_security_groups:
      - <%= p('SecurityGroupID') %>
      region: <%= p('Region') %>

    agent: {mbus: "nats://nats:nats-password@<%= p('DirectorStaticIP') %>:4222"}

    ntp: &ntp [0.pool.ntp.org, 1.pool.ntp.org]

cloud_provider:
  template: {name: aws_cpi, release: bosh-aws-cpi}

  ssh_tunnel:
    host: <%= p('DirectorEIP') %>
    port: 22
    user: vcap
    private_key: <%= private_key_path %>

  mbus: "https://mbus:mbus-password@<%= p('DirectorEIP') %>:6868"

  properties:
    aws: *aws
    agent: {mbus: "https://mbus:mbus-password@0.0.0.0:6868"}
    blobstore: {provider: local, path: /var/vcap/micro_bosh/data/cache}
    ntp: *ntp
